## 题目地址
https://leetcode-cn.com/problems/longest-palindromic-substring/

## 题目描述
```
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：
输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。

示例 2：
输入: "cbbd"
输出: "bb"
```

## 思路
-思路1：动态规划。对于字符串s中的i--j是回文字符串的条件是:
当j-i>1：(1)i+1--j-1是回文字符串；(2)s[i]==s[j]
当j-i=1：(1)s[i]==s[j]


## 代码
C++ Code：
```
class Solution {
public:
    string longestPalindrome(string s) {
        if(s.size()<2) return s;
        vector<vector<int>> matrix(s.length(),vector<int>(s.length(),0));
        int resi=0,resj=0;
        for(int i=s.length()-1;i>=0;i--){
            for(int j=i;j<s.length();j++){
                if(i==j)
                    matrix[i][j]=1;
                else if((matrix[i+1][j-1]==1 || j-i==1) && s[i]==s[j]){
                    matrix[i][j]=1;
                    if(resj-resi<j-i){
                        resj=j;
                        resi=i;
                    }
                }
            }
        }
        return s.substr(resi,resj-resi+1);
    }
};
```
Python Code:
```
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if len(s)<=1:
            return s
        resi,resj = 0,0
        matrix = [[0 for x in range(len(s))] for x in range(len(s))]
        for i in range(len(s)-1,-1,-1):
            for j in range(i,len(s),1):
                if i==j:
                    matrix[i][j]=1
                else (matrix[i+1][j-1]==1 or j-i==1) and s[i]==s[j]:
                    matrix[i][j]=1
                    if resj-resi < j-i:
                        resj,resi = j,i
        return s[resi:resj+1]
```

## 知识点
C++:
- 截取子串
s.substr(pos, n) 截取s中从pos开始（包括0）的n个字符的子串，并返回
s.substr(pos) 截取s中从从pos开始（包括0）到末尾的所有字符的子串，并返回
- 替换子串
s.replace(pos, n, s1) 用s1替换s中从pos开始（包括0）的n个字符的子串
- vector<vector<int>> matrix(s.length(),vector<int>(s.length(),0))
python:
- matrix = [[0 for x in range(len(s))] for x in range(len(s))]
## 联想
